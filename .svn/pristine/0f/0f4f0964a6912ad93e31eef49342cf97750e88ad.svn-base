package com.tetrasoft.common.fila;

import java.util.LinkedList;
import java.util.Queue;

/**
 * @author davi.mesquita	davimesquita@gmail.com
 */
public class InvokeQueueStack extends Thread {
	private Queue<Runnable> lista = new LinkedList<Runnable>();
	private Boolean queuing=true;
	private Boolean running=true;
	
	public synchronized boolean isQueuing() {
		return this.queuing;
	}
	
	private synchronized void stopQueuing() {
		this.queuing=false;
	}
	
	private synchronized void stopRunning() {
		this.running=false;
	}
	
	public synchronized boolean isRunning() {
		return this.running;
	}

	/**
	 * Inicia uma DaemonThread
	 */
	public InvokeQueueStack() {
		this.doStack(true);
	}
	
	protected InvokeQueueStack(String name) {
		this.doStack(true,name);
	}
	
	/**
	 * Inicia uma Thread 
	 */
	public InvokeQueueStack(boolean daemon) {
		this.doStack(daemon);
	}
	
	private void doStack(boolean daemon) {
		this.doStack(daemon, this.getClass().getSimpleName() );
	}
	
	private void doStack(boolean daemon, String prefix) {
		this.setName(prefix+"-"+this.getId());
		this.setDaemon(daemon);
		this.start();
	}
	
	public void add(Runnable th) throws Exception {
		if (!this.isQueuing()) throw new Exception("A Fila não  esta rodando");
		synchronized (this.lista) {
			this.lista.add(th);
			this.lista.notify();
		}
	}
	
	public synchronized void stopQueue() throws Exception {
		add(new InvokeDAO<InvokeQueueStack>(this) {
			public void run() {
				this.value().stopRunning();
			}
		});
		this.stopQueuing();
	}
	
	@Override
	public void run() {
		yield();
		while (this.isRunning()) {
			Queue<Runnable> tmp = null;
			synchronized (this.lista) {
				while (this.lista.size()==0) {
					try {
						this.lista.wait();
					} catch (Exception e) {}
				}
			}
			synchronized (this.lista) {
				tmp = new LinkedList<Runnable>( this.lista );
				this.lista.removeAll(tmp);
			}
			for (Runnable th: tmp) {
				try {
					th.run();
					yield();
				} catch (Exception e) {
					System.err.println(getClass().getSimpleName()+":th$"+th.getClass().getName());
					e.printStackTrace();
				}
			}
		}
	}
}
